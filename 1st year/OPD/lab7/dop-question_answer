В общем, ответ на вопрос «почему процессоры типа VLIW и EPIC сейчас меньше используются?» какой-то такой:

При устном ответе я приводила в основном плюсы, которые имеют эти архитектуры:

•	Распараллеливание кода на этапе компиляции – как следствие возможность лучше распределить команды между исполняющими устройствами.
•	Большую свободу исполняющего устройства (т.к. ему не надо распределять команды самому).

Но у потом я поняла, что у этого есть и соответствующие минусы, из-за которых VLIW процессоры сейчас меньше используются нежели суперскаляры:
•	Из-за того, что распараллеливание идёт на этапе компиляции компилятор должен «полностью» знать устройство процессора, чтобы хорошо
оптимизировать код. Получается, что к каждому новому процессору нужно писать свой компилятор, ведь то, что работало для старых может
не корректно работать для новых или вообще не работать (например, если у них будет разное количество исполняющих устройств или разное
количество команд в длинной команде).
•	Другая проблема возникает из-за того, что оптимизация в таких процессорах статическая, т.е. она хорошо будет работать для 
каких-нибудь расчётных задач (например просчёт какого-нибудь процесса для учёных), но плохо, если компьютер будет работать 
со внешними устройствами и ветвление в некоторых местах может оказаться плохо предсказуемым и не однозначным. (Компилятор
может посчитать более вероятной не ту ветку исполнение и оптимизировать в «худшую сторону»). В то же время, «конкурент»(*)  
RISC-процессоров с их Out-Of-Order режимом вполне неплохо может динамически «подстраиваться» в таких ситуациях.

Подводя итог, можно заметить, что сейчас RISC-процессоры выполняют примерно 5-6 инструкций за цикл, а VLIW-процессоры 6-7,
причём эта разница обусловлена больше не архитектурными особенностями VLIW-процессоров, а просто природой большинства алгоритмов –
они все последовательные и содержат мало команд, которые можно было би исполнять параллельно. 


(*) На самом деле, кажется, что это не такие и конкуренты, и в теории можно было бы когда-то сделать процессор и со статическим, 
и с динамическим распараллеливанием кода. (Хотя пока этого не сделали) 
